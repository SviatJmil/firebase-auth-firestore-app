FROM python:3.11-slim

# Робоча директорія
# Встановити робочу директорію всередині контейнера на /app і всі наступні команди (COPY, RUN, CMD) будуть виконуватись відносно цієї директорії.
WORKDIR /app

# Копіюємо тільки файли для інсталяції залежностей спочатку (для кешу)
COPY requirements.txt .

# Оновлюємо pip і встановлюємо залежності
RUN pip install --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt

# Копіюємо весь код у контейнер
COPY . .

# Відкриваємо порт для FastAPI
EXPOSE 8080

# Запуск Uvicorn (ASGI) з автоматичними воркерами через Gunicorn
# Як працює: Gunicorn запускає кілька процесів (воркерів) → кожен з них Uvicorn.
# Має сенс лише якщо у Cloud Run виділити >1 CPU на інстанс (і налаштувати кількість воркерів).
# Якщо 1 CPU → Gunicorn запустить 1 воркер і ти не отримаєш вигоди, тільки довший старт і трохи більше RAM.
# CMD ["gunicorn", "-k", "uvicorn.workers.UvicornWorker", "-b", "0.0.0.0:8080", "main:app"]


# Запуск Uvicorn (ASGI)
# Як працює: один процес, один воркер (один CPU ядро обробляє запити асинхронно).
# Cloud Run особливість:
# Cloud Run не дає більше 1 CPU під час запиту за замовчуванням, тож один процес Uvicorn = ок.
# Масштабування робить сам Cloud Run, створюючи нові контейнери, а не воркери всередині одного контейнера.
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8080"]